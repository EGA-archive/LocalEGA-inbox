diff -uN openssh.org/Makefile.in openssh.new/Makefile.in
--- openssh.org/Makefile.in	2023-10-19 17:56:41
+++ openssh.new/Makefile.in	2023-10-19 21:48:24
@@ -131,7 +131,7 @@
 	srclimit.o sftp-server.o sftp-common.o \
 	sandbox-null.o sandbox-rlimit.o sandbox-systrace.o sandbox-darwin.o \
 	sandbox-seccomp-filter.o sandbox-capsicum.o sandbox-pledge.o \
-	sandbox-solaris.o uidswap.o $(SKOBJS)
+	sandbox-solaris.o uidswap.o $(SKOBJS) mq-config.o
 
 SFTP_CLIENT_OBJS=sftp-common.o sftp-client.o sftp-glob.o
 
@@ -151,7 +151,7 @@
 
 SSHKEYSCAN_OBJS=ssh-keyscan.o $(SKOBJS)
 
-SFTPSERVER_OBJS=sftp-common.o sftp-server.o sftp-server-main.o
+SFTPSERVER_OBJS=sftp-common.o sftp-server.o sftp-server-main.o mq-config.o
 
 SFTP_OBJS=	sftp.o sftp-usergroup.o progressmeter.o $(SFTP_CLIENT_OBJS)
 
diff -uN openssh.org/configure.ac openssh.new/configure.ac
--- openssh.org/configure.ac	2023-10-19 17:56:41
+++ openssh.new/configure.ac	2023-10-19 21:47:36
@@ -5555,6 +5555,24 @@
 CFLAGS="${CFLAGS} ${CFLAGS_AFTER}"
 LDFLAGS="${LDFLAGS} ${LDFLAGS_AFTER}"
 
+###########################
+if test "x$PKGCONFIG" != "xno"; then
+
+   CPPFLAGS="${CPPFLAGS} `$PKGCONFIG --cflags librabbitmq json-c uuid`"
+   LDFLAGS="${LDFLAGS} `$PKGCONFIG --libs-only-L librabbitmq json-c uuid`"
+   LDFLAGS_NOPIE="${LDFLAGS_NOPIE} `$PKGCONFIG --libs-only-L librabbitmq json-c uuid`"
+   LIBS="${LIBS} `$PKGCONFIG --libs librabbitmq json-c uuid`"
+
+else
+   ARCH=`uname -m`
+   CPPFLAGS="${CPPFLAGS} -I/usr/local/include -I/usr/include/json-c -I/usr/include/uuid"
+   LDFLAGS="${LDFLAGS} -L/usr/local/lib/${ARCH}-linux-gnu"
+   LDFLAGS_NOPIE="${LDFLAGS_NOPIE} -L/usr/local/lib/${ARCH}-linux-gnu"
+   LIBS="${LIBS} -L/usr/local/lib/${ARCH}-linux-gnu -lrabbitmq -ljson-c -luuid"
+
+fi
+###########################
+
 # Make a copy of CFLAGS/LDFLAGS without PIE options.
 LDFLAGS_NOPIE=`echo "$LDFLAGS" | sed 's/ -pie//'`
 CFLAGS_NOPIE=`echo "$CFLAGS" | sed 's/ -fPIE//'`
diff -uN openssh.org/mq-config.c openssh.new/mq-config.c
--- openssh.org/mq-config.c	1970-01-01 01:00:00
+++ openssh.new/mq-config.c	2023-10-19 21:47:21
@@ -0,0 +1,325 @@
+#ifndef _GNU_SOURCE
+#define _GNU_SOURCE
+#endif
+
+#include <ctype.h>
+#include <errno.h>
+#include <strings.h>
+#include <string.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <netdb.h>  //hostent
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+
+#include "mq-config.h"
+
+/* Default values */
+#define MQ_HEARTBEAT       0
+#define MQ_VERIFY_PEER     0
+#define MQ_VERIFY_HOSTNAME 0
+
+/* global variable for the MQ connection settings */
+mq_options_t* mq_options = NULL;
+
+static int convert_host_to_ip(char** buffer, size_t* buflen);
+static int dsn_parse(char** buffer, size_t* buflen);
+static inline int copy2buffer(const char* data, char** dest, char **bufptr, size_t *buflen);
+static inline void set_yes_no_option(char* key, char* val, char* name, int* loc);
+
+void
+clean_mq_config(void)
+{
+  if(!mq_options) return;
+
+  D2("Cleaning configuration [%p]", mq_options);
+  if(mq_options->buffer){ free((char*)mq_options->buffer); }
+  free(mq_options);
+  return;
+}
+
+
+#ifdef DEBUG
+static bool
+valid_options(void)
+{
+  bool valid = true;
+  if(!mq_options) { D3("No config struct"); return false; }
+
+  D2("Checking the config struct");
+  if(mq_options->heartbeat < 0    ) { D3("Invalid heartbeat");           valid = false; }
+  if(mq_options->port < 0         ) { D3("Invalid port");                valid = false; }
+
+  if(!mq_options->dsn             ) { D3("Missing dsn connection");      valid = false; }
+
+  if(!mq_options->host            ) { D3("Missing host");                valid = false; }
+  if(!mq_options->vhost           ) { D3("Missing vhost");               valid = false; }
+  if(!mq_options->username        ) { D3("Missing username");            valid = false; }
+  if(!mq_options->password        ) { D3("Missing password");            valid = false; }
+
+  if(!mq_options->exchange        ) { D3("Missing exchange");            valid = false; }
+  if(!mq_options->routing_key     ) { D3("Missing routing_key");         valid = false; }
+
+  if(!!mq_options->verify_peer ^ !!mq_options->cacertfile){
+    D3("Missing cacertfile, when using verify_peer");
+    valid = false;
+  }
+
+  if(!valid){ D3("Invalid configuration from %s", mq_options->cfgfile); }
+
+  int i;
+  D3("BUFFER ------");
+  for (i = 0; i < mq_options->buflen; i++){
+    char c = mq_options->buffer[i];
+    if (c == '\0')
+      fprintf(stderr, ":");
+    else
+      fprintf(stderr, "%c", c);
+  }
+  fprintf(stderr, "\n");
+  D3("------");
+
+
+  return valid;
+}
+#endif
+
+#define INJECT_OPTION(key,ckey,val,loc) do { if(!strcmp(key, ckey) && copy2buffer(val, loc, &buffer, &buflen) < 0 ){ return -1; } } while(0)
+#define COPYVAL(val,dest,b,blen) do { if( copy2buffer(val, dest, b, blen) < 0 ){ return -1; } } while(0)
+
+static inline int
+readconfig(FILE* fp, const char* cfgfile, char* buffer, size_t buflen)
+{
+  D3("Reading configuration file");
+  char* line = NULL;
+  size_t len = 0;
+  char *key,*eq,*val,*end;
+
+  /* Default config values */
+  mq_options->heartbeat = MQ_HEARTBEAT;
+  mq_options->connection_opened = 0; /* not opened yet */
+  mq_options->ssl = 0;
+  mq_options->verify_peer = MQ_VERIFY_PEER;
+  mq_options->verify_hostname = MQ_VERIFY_HOSTNAME;
+  mq_options->dsn = NULL;
+  mq_options->cacertfile = NULL;
+  mq_options->certfile = NULL;
+  mq_options->keyfile = NULL;
+  mq_options->host = NULL;
+  mq_options->vhost = NULL;
+  mq_options->username = NULL;
+  mq_options->password = NULL;
+  mq_options->ip = NULL;
+  COPYVAL(cfgfile, &(mq_options->cfgfile), &buffer, &buflen);
+
+  /* Parse line by line */
+  while (getline(&line, &len, fp) > 0) {
+	
+    key=line;
+    /* remove leading whitespace */
+    while(isspace(*key)) key++;
+      
+    if((eq = strchr(line, '='))) {
+      end = eq - 1; /* left of = */
+      val = eq + 1; /* right of = */
+	  
+      /* find the end of the left operand */
+      while(end > key && isspace(*end)) end--;
+      *(end+1) = '\0';
+	  
+      /* find where the right operand starts */
+      while(*val && isspace(*val)) val++;
+	  
+      /* find the end of the right operand */
+      eq = val;
+      while(*eq != '\0') eq++;
+      eq--;
+      if(*eq == '\n') { *eq = '\0'; } /* remove new line */
+	  
+    } else val = NULL; /* could not find the '=' sign */
+
+    INJECT_OPTION(key, "exchange"      , val, &(mq_options->exchange)    );
+    INJECT_OPTION(key, "routing_key"   , val, &(mq_options->routing_key) );
+    INJECT_OPTION(key, "connection"    , val, &(mq_options->dsn)         );
+    INJECT_OPTION(key, "cacertfile"    , val, &(mq_options->cacertfile)  );
+    INJECT_OPTION(key, "certfile"      , val, &(mq_options->certfile)    );
+    INJECT_OPTION(key, "keyfile"       , val, &(mq_options->keyfile)     );
+
+    /* strtol ok even when val contains a comment #... */
+    if(!strcmp(key, "heartbeat")) { mq_options->heartbeat   = strtol(val, NULL, 10); }
+
+    /* Yes/No options */
+    set_yes_no_option(key, val, "verify_peer", &(mq_options->verify_peer));
+    set_yes_no_option(key, val, "verify_hostname", &(mq_options->verify_hostname));
+  }
+
+  D3("Initializing MQ connection/socket early");
+  
+  int rc = 0;
+  if( (rc = dsn_parse(&buffer, &buflen)) != 0){
+    D3("Error dsn parsing: %d", rc);
+    goto end;
+  }
+  if( (rc = convert_host_to_ip(&buffer, &buflen)) != 0){
+    D3("Error convert host to ip: %d", rc);
+    goto end;
+  }
+
+  /* fallthrough */
+end:
+  if(line) free(line);
+  return rc;
+}
+
+bool
+load_mq_config(char* cfgfile)
+{
+  D1("Loading configuration %s", cfgfile);
+  if(mq_options){ D2("Already loaded [@ %p]", mq_options); return true; }
+
+  FILE* fp = NULL;
+  size_t size = 100;
+
+  /* If no config file in passed */
+  if(!cfgfile) cfgfile = MQ_CFGFILE;
+  
+  /* read or re-read */
+  fp = fopen(cfgfile, "r");
+  if (fp == NULL || errno == EACCES) { D2("Error accessing the config file: %s", strerror(errno)); goto fail; }
+
+  mq_options = (mq_options_t*)malloc(sizeof(mq_options_t));
+  if(!mq_options){ D3("Could not allocate options data structure"); goto fail; }
+  mq_options->buffer = NULL;
+  mq_options->conn = NULL;
+  mq_options->socket = NULL;
+
+REALLOC:
+  D3("Allocating buffer of size %zd", size);
+  if(mq_options->buffer)free(mq_options->buffer);
+  mq_options->buflen = sizeof(char) * size;
+  mq_options->buffer = malloc(mq_options->buflen);
+  memset(mq_options->buffer, '\0', size);
+  /* *(mq_options->buffer) = '\0'; */
+  if(!mq_options->buffer){ D3("Could not allocate buffer of size %zd", size); goto fail; }
+  
+  if( readconfig(fp, cfgfile, mq_options->buffer, size) < 0 ){
+
+    /* Rewind first */
+    if(fseek(fp, 0, SEEK_SET)){ D3("Could not rewind config file to start"); goto fail; }
+
+    /* Double it */
+    size = size << 1;
+    goto REALLOC;
+  }
+
+  D3("Conf loaded [@ %p]", mq_options);
+
+  if(fp) fclose(fp);
+
+#ifdef DEBUG
+  return valid_options();
+#else
+  return true;
+#endif
+
+fail:
+  if(fp) fclose(fp);
+  return false;
+}
+
+/* Must be called after dsn_parse() */
+static int
+convert_host_to_ip(char** buffer, size_t* buflen)
+{
+  D3("Convert hostname to IP");
+  struct hostent *he;
+  struct in_addr **addr_list;
+  int i;
+
+  /* get the host info */
+  if ( !(he = gethostbyname(mq_options->host)) ) { D1("gethostbyname error"); return 1; }
+
+  addr_list = (struct in_addr **) he->h_addr_list;
+  
+  /* The first entry will be good */
+  for(i = 0; addr_list[i] != NULL; i++) 
+    {
+      COPYVAL(inet_ntoa(*addr_list[i]), &(mq_options->ip), buffer, buflen);
+      D2("%s converted to %s", mq_options->host, mq_options->ip);
+      return 0;
+    }
+
+  D2("Error converting to ip: %s", mq_options->host);
+  return 1;
+}
+
+/*
+ * Moves a string value to a buffer (including a \0 at the end).
+ * Adjusts the pointer to pointer right after the \0.
+ *
+ * Returns -size in case the buffer is <size> too small.
+ * Otherwise, returns the <size> of the string.
+ */
+static inline int
+copy2buffer(const char* data, char** dest, char **bufptr, size_t *buflen)
+{
+  size_t slen = strlen(data) + 1;
+
+  if(*buflen < slen) {
+    D3("buffer too small [currently: %zd bytes left] to copy \"%s\" [%zd bytes]", *buflen, data, slen);
+    return -slen;
+  }
+
+  strncpy(*bufptr, data, slen-1);
+  (*bufptr)[slen-1] = '\0';
+  
+  if(dest) *dest = *bufptr; /* record location */
+  *bufptr += slen;
+  *buflen -= slen;
+  
+  return slen;
+}
+
+static inline void
+set_yes_no_option(char* key, char* val, char* name, int* loc)
+{
+  if(!strcmp(key, name)) {
+    if(!strcasecmp(val, "yes") || !strcasecmp(val, "true") || !strcmp(val, "1") || !strcasecmp(val, "on")){
+      *loc = 1;
+    } else if(!strcasecmp(val, "no") || !strcasecmp(val, "false") || !strcmp(val, "0") || !strcasecmp(val, "off")){
+      *loc = 0;
+    } else {
+      D2("Could not parse the %s option: Using %s instead.", name, ((*loc)?"yes":"no"));
+    }
+  }
+}
+
+static int
+dsn_parse(char** buffer, size_t* buflen)
+{
+  D3("Parsing DSN");
+  if(!mq_options->dsn) return 2;
+
+  struct amqp_connection_info ci;
+  char *url = strdup(mq_options->dsn);
+  amqp_default_connection_info(&ci);
+  int rc;
+  if ( (rc = amqp_parse_url(url, &ci)) ) {
+    D1("Unable to parse connection URL: %s [Error %s]", url, amqp_error_string2(rc));
+    return 1;
+  }
+
+  COPYVAL(ci.host    , &(mq_options->host)    , buffer, buflen);
+  COPYVAL(ci.vhost   , &(mq_options->vhost)   , buffer, buflen);
+  COPYVAL(ci.user    , &(mq_options->username), buffer, buflen);
+  COPYVAL(ci.password, &(mq_options->password), buffer, buflen);
+
+  mq_options->port = ci.port;
+  mq_options->ssl = ci.ssl;
+
+  D1("Host: %s", mq_options->host);
+
+  return 0;
+}
diff -uN openssh.org/mq-config.h openssh.new/mq-config.h
--- openssh.org/mq-config.h	1970-01-01 01:00:00
+++ openssh.new/mq-config.h	2023-10-19 21:47:21
@@ -0,0 +1,77 @@
+#ifndef __MQ_CONFIG_H_INCLUDED__
+#define __MQ_CONFIG_H_INCLUDED__
+
+#include <stdbool.h>
+#include <sys/types.h> 
+
+#include "amqp.h"
+
+/* Default config file, if not passed at command-line */
+#define MQ_CFGFILE "/etc/ega/mq.conf"
+
+struct mq_options_s {
+  char* cfgfile;
+  char* buffer;
+  int buflen;
+  
+  char* dsn;                      /* the connection definition as one string */
+  amqp_connection_state_t conn;   /* the connection pointer */
+  amqp_socket_t *socket;          /* socket prepared outside chroot */
+  int connection_opened;          /* connection open called */
+
+  int   ssl;
+  int   verify_hostname;
+  int   verify_peer;              /* For the SSL context */
+  char* cacertfile;               /* For TLS server verification */
+  char* certfile;                 /* For TLS client verification */
+  char* keyfile;                  /* For TLS client verification */
+
+  char* host;                     /* Updated from the above DSN */
+  char* ip;                       /* Converted before chroot */
+  int   port;
+  char* vhost;
+  char* username;
+  char* password;
+
+  char* exchange;      /* Name of the MQ exchange */
+  char* routing_key;   /* Routing key to send to */
+
+  int heartbeat;       /* in seconds */
+};
+
+typedef struct mq_options_s mq_options_t;
+
+extern mq_options_t* mq_options;
+
+bool load_mq_config(char* cfgfile);
+void clean_mq_config(void);
+
+/* ########### Logging ########### */
+#define D1(...)
+#define D2(...)
+#define D3(...)
+
+#ifdef DEBUG
+#include "log.h" /* from openssh */
+
+#if DEBUG > 0
+#undef D1
+#define D1(fmt, ...) logit("[MQ] %-16s(%3d) %-20s | " fmt, __FILE__, __LINE__, __FUNCTION__, ##__VA_ARGS__)
+#endif
+
+#if DEBUG > 1
+#undef D2
+#define D2(fmt, ...) logit("[MQ] %-16s(%3d) %-20s | " fmt, __FILE__, __LINE__, __FUNCTION__, ##__VA_ARGS__)
+#endif
+
+#if DEBUG > 2
+#undef D3
+#define D3(fmt, ...) logit("[MQ] %-16s(%3d) %-20s | " fmt, __FILE__, __LINE__, __FUNCTION__, ##__VA_ARGS__)
+#endif
+
+#endif /* !DEBUG */
+
+#endif /* !__MQ_CONFIG_H_INCLUDED__ */
+
+
+
diff -uN openssh.org/sftp-server.c openssh.new/sftp-server.c
--- openssh.org/sftp-server.c	2023-10-19 17:56:41
+++ openssh.new/sftp-server.c	2023-10-19 21:51:39
@@ -57,6 +57,18 @@
 #include "sftp.h"
 #include "sftp-common.h"
 
+#ifdef HAVE_SHA2_H /* For the checksums */
+#  include <sha2.h>
+#else
+#  include "openbsd-compat/sha2.h"
+#endif
+
+#include "mq-config.h"
+
+int mq_send_upload(const char* username, const char* filepath, const char* hexdigest, const off_t filesize, const time_t modified);
+int mq_send_remove(const char* username, const char* filepath);
+int mq_send_rename(const char* username, const char* oldpath, const char* newpath);
+
 char *sftp_realpath(const char *, char *); /* sftp-realpath.c */
 
 /* Maximum data read that we are willing to accept */
@@ -315,6 +327,7 @@
 	char *name;
 	u_int64_t bytes_read, bytes_write;
 	int next_unused;
+        SHA2_CTX md; /* sha256 checksum */
 };
 
 enum {
@@ -438,6 +451,13 @@
 		handles[handle].bytes_write += bytes;
 }
 
+static void
+handle_update_checksum(int handle, u_char *data, int len)
+{
+        if (handle_is_ok(handle, HANDLE_FILE) && len > 0)
+	        SHA256Update(&(handles[handle].md), data, len);
+}
+
 static u_int64_t
 handle_bytes_read(int handle)
 {
@@ -460,9 +480,28 @@
 	int ret = -1;
 
 	if (handle_is_ok(handle, HANDLE_FILE)) {
-		ret = close(handles[handle].fd);
-		free(handles[handle].name);
-		handle_unused(handle);
+	        Handle *h = &handles[handle];
+		struct stat st;
+		fstat(h->fd, &st);
+		ret = close(h->fd);
+		if (!ret                                       /* OK */
+		    && (h->flags & (O_CREAT|O_TRUNC|O_APPEND)) /* Create or Truncate or Append: (re)upload */
+		    && !(h->flags & O_RDONLY)                  /* not Read-Only */
+		    )
+		  {
+		    unsigned char digest[SHA256_DIGEST_LENGTH];
+		    unsigned char hexdigest[SHA256_DIGEST_LENGTH * 2 + 1];
+		    int i;
+		    SHA256Final(digest, &(h->md));
+		    /* memset(hexdigest, '\0', SHA256_DIGEST_LENGTH * 2 + 1); */
+		    for (i = 0; i < SHA256_DIGEST_LENGTH; i++) {
+		      sprintf(hexdigest + (i * 2), "%02x", digest[i]);
+		    }
+		    hexdigest[SHA256_DIGEST_LENGTH * 2] = '\0';
+		    mq_send_upload(pw->pw_name, h->name, hexdigest, st.st_size, st.st_mtime);
+		  }
+	        free(h->name);
+                handle_unused(handle);
 	} else if (handle_is_ok(handle, HANDLE_DIR)) {
 		ret = closedir(handles[handle].dirp);
 		free(handles[handle].name);
@@ -770,6 +809,7 @@
 			if (handle < 0) {
 				close(fd);
 			} else {
+ 			        SHA256Init(&(handles[handle].md));
 				send_handle(id, handle);
 				status = SSH2_FX_OK;
 			}
@@ -885,6 +925,7 @@
 			} else if ((size_t)ret == len) {
 				status = SSH2_FX_OK;
 				handle_update_write(handle, ret);
+				handle_update_checksum(handle, data, ret);
 			} else {
 				debug2_f("nothing at all written");
 				status = SSH2_FX_FAILURE;
@@ -1196,6 +1237,7 @@
 	r = unlink(name);
 	status = (r == -1) ? errno_to_portable(errno) : SSH2_FX_OK;
 	send_status(id, status);
+	if(status == SSH2_FX_OK) mq_send_remove(pw->pw_name, name);
 	free(name);
 }
 
@@ -1320,6 +1362,7 @@
 			status = SSH2_FX_OK;
 	}
 	send_status(id, status);
+	if(status == SSH2_FX_OK) mq_send_rename(pw->pw_name, oldpath, newpath);
 	free(oldpath);
 	free(newpath);
 }
@@ -1384,6 +1427,7 @@
 	r = rename(oldpath, newpath);
 	status = (r == -1) ? errno_to_portable(errno) : SSH2_FX_OK;
 	send_status(id, status);
+	if(status == SSH2_FX_OK) mq_send_rename(pw->pw_name, oldpath, newpath);
 	free(oldpath);
 	free(newpath);
 }
@@ -1876,6 +1920,8 @@
 void
 sftp_server_cleanup_exit(int i)
 {
+        clean_mq_config(); /* That will call mq_clean(); */
+
 	if (pw != NULL && client_addr != NULL) {
 		handle_log_exit();
 		logit("session closed for local user %s from [%s]",
@@ -2105,4 +2151,373 @@
 		else if (r != SSH_ERR_NO_BUFFER_SPACE)
 			fatal_fr(r, "reserve");
 	}
+}
+
+
+/* #############################################
+   
+   MQ implementation
+
+   ############################################# */
+
+#include <json-c/json.h> /* For the JSON-formatted MQ message */
+#include <uuid/uuid.h>   /* For uuid in the MQ message */
+#define UUID_STR_LEN	37
+
+/* For RabbitMQ */
+#include "amqp.h"
+#include "amqp_ssl_socket.h"
+#include "amqp_tcp_socket.h"
+
+#include "mq-config.h"
+
+static int do_send_message(const char* message);
+static char* build_message(int operation,
+			   const char* username,
+			   const char* filepath,
+			   const unsigned char *hexdigest,
+			   const off_t filesize,
+			   const time_t modified,
+			   const char* oldpath);
+
+/* ================================================
+ *
+ *              Broker connection
+ *
+ * ================================================ */
+
+static int mq_init_amqp(void);
+static int mq_init_amqps(void);
+
+int
+mq_init(void)
+{
+  if(mq_options->ssl)
+    return mq_init_amqps();
+  return mq_init_amqp();
+}
+
+int
+mq_clean(void)
+{
+  if(!mq_options->conn) return 0; /* Not initialized */
+
+  D2("Cleaning connection to message broker");
+  amqp_rpc_reply_t amqp_ret;
+  int rc;
+
+  amqp_ret = amqp_channel_close(mq_options->conn, 1, AMQP_REPLY_SUCCESS);
+  if (amqp_ret.reply_type != AMQP_RESPONSE_NORMAL) {
+    D2("Error: Closing channel");
+    return 1;
+  }
+
+  amqp_ret = amqp_connection_close(mq_options->conn, AMQP_REPLY_SUCCESS);
+  if (amqp_ret.reply_type != AMQP_RESPONSE_NORMAL) {
+    D2("Error: Closing connection");
+    return 2;
+  }
+
+  /* check if ssl */
+  if (mq_options->ssl && (rc = amqp_uninitialize_ssl_library()) < 0) {
+    D2("Error: Uninitializing SSL library");
+    return 3;
+  }
+
+  if ((rc = amqp_destroy_connection(mq_options->conn)) < 0) {
+    D2("Error: Ending connection");
+    return 4;
+  }
+
+  mq_options->connection_opened = 0;
+  mq_options->conn = NULL;
+  return 0;
+}
+
+static int
+mq_init_amqp(void)
+{
+  D2("Initializing AMQP socket");
+  mq_options->conn = amqp_new_connection();
+  mq_options->socket = amqp_tcp_socket_new(mq_options->conn);
+  if (!mq_options->socket) { D3("Error creating TCP socket"); return 1; }
+  return 0;
+}
+
+static int
+mq_init_amqps(void)
+{
+  D2("Initializing AMQPS socket");
+  int rc;
+
+  mq_options->conn = amqp_new_connection();
+  mq_options->socket = amqp_ssl_socket_new(mq_options->conn);
+
+  if (!mq_options->socket) { D3("Error creating TCP/SSL socket"); return 1; }
+
+  if (mq_options->verify_peer && mq_options->cacertfile)
+    {
+      rc = amqp_ssl_socket_set_cacert(mq_options->socket, mq_options->cacertfile);
+      if (rc != AMQP_STATUS_OK){
+	D1("Error setting the CA certification: %s", mq_options->cacertfile);
+	return 2;
+      }
+    }
+
+  amqp_ssl_socket_set_verify_peer(mq_options->socket, mq_options->verify_peer);
+  amqp_ssl_socket_set_verify_hostname(mq_options->socket, mq_options->verify_hostname);
+
+  if(mq_options->certfile && mq_options->keyfile){
+    /* Checking if the keyfile is not world nor group writable */
+    struct stat st;
+    if (stat(mq_options->keyfile, &st) != 0){
+      D1("Error accessing %s: %s", mq_options->keyfile, strerror(errno));
+      return 3;
+    }
+    if (st.st_uid != 0 || (st.st_mode & 022) != 0){
+      D1("bad ownership or modes for the keyfile %s", mq_options->keyfile);
+      return 4;
+    }
+    if ( !S_ISREG(st.st_mode) ){
+      D1("Keyfile \"%s\" is not a regular file", mq_options->keyfile);
+      return 5;
+    }
+    /* All good... */
+    rc = amqp_ssl_socket_set_key(mq_options->socket, mq_options->certfile, mq_options->keyfile);
+    if (rc != AMQP_STATUS_OK){
+      D1("Error setting the private key: %s", mq_options->cacertfile);
+      return 6;
+    }
+  }
+
+  D2("Initialization of AMQPS socket - done");
+  return 0;
+}
+
+static int
+mq_open_connection(void)
+{
+  D2("Connecting to message broker");
+  int rc;
+
+  if(!mq_options->socket || !mq_options->ip)
+    {
+      D1("The AMQP Socket should already be created, or improper configuration");
+      return 1;
+    }
+
+  /* We might be in a chroot env, so using IP and not hostname */
+  if ( (rc = amqp_socket_open(mq_options->socket, mq_options->ip, mq_options->port)) ) {
+    D1("Error opening TCP socket: %s", amqp_error_string2(rc));
+    return 2;
+  }
+
+  amqp_rpc_reply_t amqp_ret;
+  amqp_ret =
+    amqp_login(mq_options->conn,
+	       mq_options->vhost,
+	       0, /* no limit for channel number */
+	       AMQP_DEFAULT_FRAME_SIZE,
+	       mq_options->heartbeat,
+	       AMQP_SASL_METHOD_PLAIN,
+	       mq_options->username,
+	       mq_options->password);
+
+  if (amqp_ret.reply_type != AMQP_RESPONSE_NORMAL) {
+    D2("Error: Logging in");
+    return 3;
+  }
+
+  amqp_channel_open(mq_options->conn, 1);
+  amqp_ret = amqp_get_rpc_reply(mq_options->conn);
+  if (amqp_ret.reply_type != AMQP_RESPONSE_NORMAL) {
+    D2("Error opening channel");
+    return 4;
+  }
+
+  /* Success: Mark it as opened */
+  mq_options->connection_opened = 1;
+  return 0;
+}
+
+/* ================================================
+ *
+ *                For the messages
+ *
+ * ================================================ */
+#define MQ_OP_UPLOAD 1
+#define MQ_OP_REMOVE 2
+#define MQ_OP_RENAME 3
+
+int
+mq_send_upload(const char* username, const char* filepath, const char* hexdigest, const off_t filesize, const time_t modified)
+{ 
+  D2("%s uploaded %s", username, filepath);
+  char* msg = NULL;
+
+  if(!mq_options->connection_opened /* Not yet logged in */
+     && mq_open_connection() != 0)  /* Error logging in */
+    return 1;
+
+  msg = build_message(MQ_OP_UPLOAD, username, filepath, hexdigest, filesize, modified, NULL);
+  D3("sending '%s' to %s", msg, mq_options->host);
+
+  if(do_send_message(msg) == AMQP_STATUS_OK){
+    D2("Message sent to amqp%s://%s:%d/%s", ((mq_options->ssl)?"s":""),
+                                            mq_options->host,
+                                            mq_options->port,
+	                                    mq_options->vhost);
+    free(msg);
+    return 0;
+  }
+  D2("Unable to send message");
+  free(msg);
+  return 2;
+}
+
+int
+mq_send_remove(const char* username, const char* filepath)
+{ 
+  D2("%s removed %s", username, filepath);
+  char* msg = NULL;
+
+  if(!mq_options->connection_opened /* Not yet logged in */
+     && mq_open_connection() != 0)  /* Error logging in */
+    return 1;
+
+  msg = build_message(MQ_OP_REMOVE, username, filepath, NULL, 0, 0, NULL);
+  D3("sending '%s' to %s", msg, mq_options->host);
+
+  if(do_send_message(msg) == AMQP_STATUS_OK){
+    D2("Message sent to amqp%s://%s:%d/%s", ((mq_options->ssl)?"s":""),
+                                            mq_options->host,
+                                            mq_options->port,
+	                                    mq_options->vhost);
+    free(msg);
+    return 0;
+  }
+  D2("Unable to send message");
+  free(msg);
+  return 2;
+}
+
+int
+mq_send_rename(const char* username, const char* oldpath, const char* newpath)
+{ 
+  D2("%s renamed %s into %s", username, oldpath, newpath);
+  char* msg = NULL;
+
+  if(!mq_options->connection_opened /* Not yet logged in */
+     && mq_open_connection() != 0)  /* Error logging in */
+    return 1;
+  
+  msg = build_message(MQ_OP_RENAME, username, newpath, NULL, 0, 0, oldpath);
+  D3("sending '%s' to %s", msg, mq_options->host);
+
+  if(do_send_message(msg) == AMQP_STATUS_OK){
+    D2("Message sent to amqp%s://%s:%d/%s", ((mq_options->ssl)?"s":""),
+                                            mq_options->host,
+                                            mq_options->port,
+	                                    mq_options->vhost);
+    free(msg);
+    return 0;
+  }
+  D2("Unable to send message");
+  free(msg);
+  return 2;
+}
+
+static char*
+build_message(int operation,
+	      const char* username,
+	      const char* filepath,
+	      const unsigned char *hexdigest,
+	      const off_t filesize,
+	      const time_t modified,
+	      const char* oldpath)
+{
+  char* res = NULL;
+  json_object *obj = json_object_new_object();
+
+  /* Common things */
+  json_object_object_add(obj,
+			 "user",
+			 json_object_new_string(username));
+  json_object_object_add(obj,
+			 "filepath",
+			 json_object_new_string(filepath));
+
+  /* Convert operation */
+  switch(operation){
+  case MQ_OP_UPLOAD:
+    json_object_object_add(obj,
+			   "operation",
+			   json_object_new_string("upload"));
+    /* Checksum */
+    json_object *jchecksum = json_object_new_object();
+    json_object_object_add(jchecksum, "type", json_object_new_string("sha256"));
+    json_object_object_add(jchecksum, "value", json_object_new_string(hexdigest));
+    json_object *jarray = json_object_new_array();
+    json_object_array_add(jarray, jchecksum);
+    json_object_object_add(obj,
+			   "encrypted_checksums",
+			   jarray);
+    /* Filesize */
+    json_object_object_add(obj,
+			   "filesize",
+			   json_object_new_int64(filesize));
+    /* Timestamp last modified */
+    json_object_object_add(obj,
+			   "file_last_modified",
+			   json_object_new_int64(modified));
+    break;
+  case MQ_OP_REMOVE:
+    json_object_object_add(obj,
+			   "operation",
+			   json_object_new_string("remove"));
+    break;
+  case MQ_OP_RENAME:
+    json_object_object_add(obj,
+			   "operation",
+			   json_object_new_string("rename"));
+    /* Add the oldpath for rename */
+    json_object_object_add(obj,
+			   "oldpath",
+			   json_object_new_string(oldpath)); /* Not NULL */
+    break;
+  default:
+    D1("Unknown operation: %d", operation);
+    goto final;
+  }
+
+  res = strdup(json_object_to_json_string_ext(obj, JSON_C_TO_STRING_NOSLASHESCAPE));
+
+final:
+  json_object_put(obj); // free json object, and the other ones inside
+  return res;
+}
+
+
+static int
+do_send_message(const char* message)
+{
+  amqp_basic_properties_t props;
+  props._flags = AMQP_BASIC_CONTENT_TYPE_FLAG | AMQP_BASIC_DELIVERY_MODE_FLAG | AMQP_BASIC_CORRELATION_ID_FLAG;
+  props.content_type = amqp_cstring_bytes("application/json");
+  props.delivery_mode = 2; /* persistent delivery mode */
+
+  /* Generate Correlation id */
+  char correlation_id[UUID_STR_LEN];
+  uuid_t uu;
+  uuid_generate(uu);
+  uuid_unparse(uu, correlation_id);
+  D3("Correlation ID: %s", correlation_id);
+  props.correlation_id = amqp_cstring_bytes(correlation_id);
+
+  return amqp_basic_publish(mq_options->conn,
+			    1, /* channel */
+			    amqp_cstring_bytes(mq_options->exchange),
+			    amqp_cstring_bytes(mq_options->routing_key),
+			    0, 0, &props,
+			    amqp_cstring_bytes(message)); /* body */
 }
diff -uN openssh.org/sshd.c openssh.new/sshd.c
--- openssh.org/sshd.c	2023-10-19 17:56:41
+++ openssh.new/sshd.c	2023-10-19 21:47:56
@@ -128,6 +128,10 @@
 #include "srclimit.h"
 #include "dh.h"
 
+/* Name of the MQ configuration file. */
+#include "mq-config.h"
+char *mq_config_file_name = MQ_CFGFILE;
+
 /* Re-exec fds */
 #define REEXEC_DEVCRYPTO_RESERVED_FD	(STDERR_FILENO + 1)
 #define REEXEC_STARTUP_PIPE_FD		(STDERR_FILENO + 2)
@@ -1591,7 +1595,7 @@
 
 	/* Parse command-line arguments. */
 	while ((opt = getopt(ac, av,
-	    "C:E:b:c:f:g:h:k:o:p:u:46DGQRTdeiqrtV")) != -1) {
+	    "C:E:b:c:f:g:h:k:o:p:u:Z:46DGQRTdeiqrtV")) != -1) {
 		switch (opt) {
 		case '4':
 			options.address_family = AF_INET;
@@ -1602,6 +1606,9 @@
 		case 'f':
 			config_file_name = optarg;
 			break;
+		case 'Z':
+			mq_config_file_name = optarg;
+			break;
 		case 'c':
 			servconf_add_hostcert("[command-line]", 0,
 			    &options, optarg);
@@ -1713,6 +1720,24 @@
 	else
 		closefrom(REEXEC_DEVCRYPTO_RESERVED_FD);
 
+	/* Load the MQ connection settings */
+	logit("[MQ] Loading configuration %s", mq_config_file_name);
+	load_mq_config(mq_config_file_name);
+	verbose("[MQ]     config file: %s", mq_options->cfgfile);
+	verbose("[MQ]            host: %s [IP: %s]", mq_options->host, mq_options->ip);
+	verbose("[MQ]            port: %d", mq_options->port);
+	verbose("[MQ]           vhost: %s", mq_options->vhost);
+	verbose("[MQ]        username: %s", mq_options->username);
+	verbose("[MQ]        exchange: %s", mq_options->exchange);
+	verbose("[MQ]     routing key: %s", mq_options->routing_key);
+	verbose("[MQ]       heartbeat: %d", mq_options->heartbeat);
+	verbose("[MQ]     ssl enabled: %s", (mq_options->ssl)?"yes":"no");
+	verbose("[MQ]     verify peer: %s", (mq_options->verify_peer)?"yes":"no");
+	verbose("[MQ]      cacertfile: %s", mq_options->cacertfile);
+	verbose("[MQ]        certfile: %s", mq_options->certfile);
+	verbose("[MQ]         keyfile: %s", mq_options->keyfile);
+	verbose("[MQ] verify hostname: %s", (mq_options->verify_hostname)?"yes":"no");
+
 	seed_rng();
 
 	/* If requested, redirect the logs to the specified logfile. */
@@ -2443,6 +2468,8 @@
 void
 cleanup_exit(int i)
 {
+        clean_mq_config(); /* And not mq_clean, cuz sshd didn't open the MQ connection */
+
 	if (the_active_state != NULL && the_authctxt != NULL) {
 		do_cleanup(the_active_state, the_authctxt);
 		if (use_privsep && privsep_is_preauth &&
